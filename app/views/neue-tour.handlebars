<!-- Hier landet nutzer, wenn er eine von ihm erstellte TOur bearbeiten will -->
<!DOCTYPE html>
<html lang="en">

<head>
  <title>Tour: x</title>
  <meta charset="utf-8" />
  <!-- Optimiert für mobile Geräte -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
  <link rel="stylesheet" href="/public/styles.css" />

  <style>
    body {
      padding: 0;
      margin: 0;
    }

    html,
    body,
    .map {
      position: absolute;
      height: 100%;
      width: 100vw;
    }
  </style>
</head>

<body>
  <div id="map" class="map"></div>
  <button disabled="true" class="speichern-button" onclick="tourInitialSpeichern()">Speichern</button>
  <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
  <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

  <!-- Ab hier eigene Skripte -->
  <script src="/public/util.js"></script>
  <script src="/public/gps.js"></script>




  <script>
    // Initialisiert die Karte und setzt die Ansicht auf einen spezifischen Punkt und Zoomlevel
    var map = L.map('map').setView([52.151222, 9.961226], 13)

    // Werden überschrieben von funktion tourDaten in der util.js. Ging nicht als global variable, da Berechnung an Event listener gebunden ist... 
    let distanz = 0;
    let dauer = 0;


    /**
    */ 
    function tourInitialSpeichern() {
      // ID der Tour aus URL holen
      //const tourID = window.location.pathname.split('/').pop()
      //console.log('Tour ID beim Updaten / Speichern: ', tourID)
      // POST request zum Server
      fetch('/neue-tour/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ punkte: getPunkte(), distanz: distanz, dauer: dauer}),
      })
        .then((res) => res.json())
        .then((data) => {
          console.log('Erfolgreich:', data)

          // dann redirected zur /tour-bearbeiten/:id, wobei die ID aus der Antwort des Servers kommt
          window.location.href = '/tour-bearbeiten/' + data.id

        })
        .catch((error) => {
          console.error('Error:', error)
        })
    }


    // Die Punkte, die die Tour ausmachen, direkt aus der Datenbank 

    function speicherButtonAction() {
      console.log("Speichern button geklickt")
    }

    // Lädt und zeigt das Basis-Kartenmaterial von OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors',
    }).addTo(map)


    // toggelt den Button zwischen disabled und nicht-disabled, damit nur bei Änderungen gespeichert werden kann 
    function toggleSpeichernButtonAktiviert() {

    }

    // Routing-Control-Initialisierung mit Start- und Endpunkt
    var routingControl = L.Routing.control({
      waypoints: [
        //   L.latLng(52.151222, 9.961226),
        //  L.latLng(52.151222, 9.961026),

      ],
      createMarker: function (i, waypoint) {
        //return L.marker(waypoint.latLng, { draggable: true }).on('click', function () {//removeWaypoint(i)})
        const marker = L.marker(waypoint.latLng, { draggable: true }).bindPopup("Waypoint " + (i + 1))

        marker.on('popupopen', function(e) {
          var removeButton = L.DomUtil.create('button', '', marker.getPopup().getContent());
          removeButton.textContent = "Remove Waypoint";
          L.DomEvent.on(removeButton, 'click', function() {
            routingControl.spliceWaypoints(i, 1);
            marker.closePopup();
          });
        });

        return marker 
        
      },

      routeWhileDragging: true,
      // Aktiviert die Geocoding-Funktion, um Adressen in Koordinaten umzuwandeln 
      //geocoder: L.Control.Geocoder.nominatim(),

      // Wird nur beim Setzen eines Markers ausgeführt 


      router: new L.Routing.osrmv1({
        // URL des OSRM-Services, je nachdem ob die Anwendung lokal oder auf Domain läuft 
        serviceUrl: getServiceURL(),
        // Zu Fuß als Fortbewegungsmittel
        profile: 'foot',
      }),
    }).addTo(map)

    let previousWaypoints = [];

    let speichernButton = document.querySelector(".speichern-button")
    // set the speichern button to disabled
    


    routingControl.on('waypointschanged', function (e) {
      let currentWaypoints = routingControl.getWaypoints();

      if (currentWaypoints.length > 2) {
        speichernButton.disabled = false;
      } 

      console.log("Current way points: ", currentWaypoints)

      if (currentWaypoints !== previousWaypoints) {
          // Waypoints have changed, show the "save tour" button
          console.log("something changed")
          // Update previousWaypoints for next comparison
          previousWaypoints = currentWaypoints;
      }
    })

    let waypoints = [];

    // Berechnen der Distanz und Dauer der Tour 
    routingControl.on('routesfound', tourDaten);


    map.on('click', function (e) {
      waypoints.push(e.latlng);
      routingControl.setWaypoints(waypoints);
      routingControl.getPlan();
    });




    // Dient wohl erstmal als Platzhalter 

    /*
    const GPSmarker = L.marker([51.505, -0.09]).addTo(map);

    positionAbfragen();
    setInterval(positionAbfragen, 5000);
  */

    /* 
      // Funktion, die bei einem Klick auf die Karte aufgerufen wird
      function onMapClick(e) {
        // Fügt einen neuen Wegpunkt am Ort des Klicks hinzu
        // Parameter: Index, Anzahl der zu entfernenden Wegpunkte, Koordinaten des neuen Wegpunkts
        //routingControl.spliceWaypoints(routingControl.getWaypoints().length - 1, 0, e.latlng)
        //routingControl.spliceWaypoints(routingControl.getWaypoints().length - 1, 0, e.latlng)
        routingControl.spliceWaypoints(0, 2, e.latlng)
  
        toggleSpeichernButtonAktiviert()
      }
  
      // TODO: 
      function startPunktHinzufuegen() {
        routingControl.spliceWaypoints(0, 0, map.getCenter())
        //toggleSpeichernButtonAktiviert()
      }
  
      // reset the waypoints
      function resetWaypoints() {
        for (let i = 0; i < routingControl.getWaypoints().length; i++) {
          removeWaypoint(i)
        }
      }
      */



    // Event-Listener, der auf Klicks auf der Karte reagiert
    //    map.on('click', onMapClick)
  </script>




</body>

</html>