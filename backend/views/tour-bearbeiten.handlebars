<!-- Hier landet nutzer, wenn er eine von ihm erstellte TOur bearbeiten will -->
<!DOCTYPE html>
<html lang="en">

<head>
  <title>Tour: x</title>
  <meta charset="utf-8" />
  <!-- Optimiert für mobile Geräte -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

  <style>
    body {
      padding: 0;
      margin: 0;
    }

    html,
    body,
    .map {
      position: absolute;
      height: 100%;
      width: 100vw;
    }
  </style>
</head>

<body>
  <div id="map" class="map"></div>
  <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
  <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

  <!-- Ab hier eigene Skripte -->
  <script src="/public/gps.js"></script>
  <script src="/public/leaflet-funktionen.js"></script>
  <script src="/public/server-verbindung.js"></script>






  <script>
    // Initialisiert die Karte und setzt die Ansicht auf einen spezifischen Punkt und Zoomlevel
    var map = L.map('map').setView([52.151222, 9.961226], 13)

    // Lädt und zeigt das Basis-Kartenmaterial von OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors',
    }).addTo(map)

    function removeWaypoint(index) {
      var waypoints = routingControl.getWaypoints()
      if (waypoints.length > 2) {
        // Verhindern, dass die letzten zwei Wegpunkte entfernt werden
        waypoints.splice(index, 1)
        routingControl.setWaypoints(waypoints)
      }
    }

    /**
      * Gibt die URL des OSRM-Services zurück, abhängig davon, ob die Anwendung lokal oder auf Domain läuft
      * @returns {string} URL des OSRM-Services 
      * Caddy leitet alles auf /route an OSRM weiter. Lokal über port 80, sonst über 443 da https dann aktiv. 
      */
    function getServiceURL() {
      if (window.location.hostname === 'localhost') {
        return 'http://localhost/route/v1'
      } else {
        return 'https://stadttouren.online/route/v1'
      }
    }

    /**
      * Gibt die Koordinaten der Wegpunkte zurück, als Array von Objekten mit lat und lng
      * @returns {Array} Array mit Koordinaten der Wegpunkte
      */
    function getPunkte() {
      var waypoints = routingControl.getWaypoints()
      var punkte = []
      for (var i = 0; i < waypoints.length; i++) {
        punkte.push(waypoints[i].latLng)
      }
      return punkte
    }



    // Routing-Control-Initialisierung mit Start- und Endpunkt
    var routingControl = L.Routing.control({
      waypoints: [
        L.latLng(52.134119, 9.974163),
        L.latLng(52.134158, 9.967912),
      ],
      routeWhileDragging: true,
      // Aktiviert die Geocoding-Funktion, um Adressen in Koordinaten umzuwandeln 
      //geocoder: L.Control.Geocoder.nominatim(),

      createMarker: function (i, waypoint, n) {
        var marker = L.marker(waypoint.latLng, {
          draggable: true,
        })

        // Event-Listener für das Klicken auf den Marker
        marker.on('click', function () {
          removeWaypoint(i)
        })

        return marker
      },

      router: new L.Routing.osrmv1({
        // URL des OSRM-Services, je nachdem ob die Anwendung lokal oder auf Domain läuft 
        serviceUrl: getServiceURL(),
        // Zu Fuß als Fortbewegungsmittel
        profile: 'foot',
      }),
    }).addTo(map)

    // Dient wohl erstmal als Platzhalter 
    const GPSmarker = L.marker([51.505, -0.09]).addTo(map);

    positionAbfragen();
    setInterval(positionAbfragen, 5000);

    // Funktion, die bei einem Klick auf die Karte aufgerufen wird
    function onMapClick(e) {
      // Fügt einen neuen Wegpunkt am Ort des Klicks hinzu
      routingControl.spliceWaypoints(
        routingControl.getWaypoints().length - 1,
        0,
        e.latlng
      )
    }

    // Event-Listener, der auf Klicks auf der Karte reagiert
    map.on('click', onMapClick)
  </script>
</body>

</html>